security:
    # Configuration des hashers de mots de passe
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # Configuration du provider d'utilisateurs
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Clients
                property: email

    # Configurations des firewalls
    firewalls:
        # Route pour la dev (les fichiers de profiler, css, etc)
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
   
        # Routes API protégées par JWT
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
            json_login:
                check_path: login_check
                username_path: email  # Utilisation de l'email pour l'authentification
                password_path: password  # Utilisation du mot de passe pour l'authentification
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        # Main firewall (pour les autres routes non API)
        main:
            lazy: true
            provider: app_user_provider
            # Permet l'impersonation si nécessaire
            # switch_user: true

    # Contrôles d'accès (definir les rôles pour accéder aux routes)
    access_control:
        - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

# Configuration spécifique pour les tests
when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4  # Le plus faible possible pour bcrypt
                time_cost: 3  # Le plus faible possible pour argon
                memory_cost: 10  # Le plus faible possible pour argon
